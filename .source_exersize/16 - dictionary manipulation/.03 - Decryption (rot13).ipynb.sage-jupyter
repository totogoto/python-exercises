{"kernelspec":{"display_name":"Python 3 (system-wide)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}}
{"cell_type":"code","execution_count":1,"metadata":{"trusted":true},"outputs":[],"source":"from worlds.levels import get_robo"}
{"cell_type":"markdown","metadata":{},"source":"# Decryption\n\nMaster has left scrambled messages for Otto \n\nHelp Otto read the original message by unscrambling the letters\n\nThe cell below contains a dict called `secret` that helps with the decryption<br>\nEg. All `b`s should be replaced by `p` (the key and the value in the secret)\n\n__Important__ : Mind the spaces and punctuations\n\n__Trivia__: This exercise uses ROT13 ( https://en.wikipedia.org/wiki/ROT13 ) which is a special case of https://en.wikipedia.org/wiki/Caesar_cipher \n\n\n### What you need to know\n\n- The functions `move()` to move.\n- calling `move()` in front of a wall causes otto to crash into the wall and the program errors out. Please take care of otto ðŸ¤—\n- The function `message_here()` returns True if message in the current cell.\n- The function `read_message()` returns the message if the message in the current cell.\n#### Python  function\n- `dict. get(key[, default])` - Returns the value for key in the dictionary; if not found returns a default value.\n-  `s.islower()` : True if all characters of the string are in lowercase.\n-  `s.isupper()` : True if all characters of the string are in uppercase.\n-  `s.lower()` : Return a copy of the string with all the cased characters converted to lowercase.\n-  `s.upper()` : Return a copy of the string with all the cased characters converted to uppercase.\n-  `s.capitalize()`: Return a copy of the string with only its first character capitalized.\n-  And many more ...  [Goto Docs](https://docs.python.org/3/library/stdtypes.html#string-methods)\n"}
{"cell_type":"code","execution_count":2,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"SECRET TABLE\n============\nFIND    | n | o | p | q | r | s | t | u | v | w | x | y | z | a | b | c | d | e | f | g | h | i | j | k | l | m\nREPLACE | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z\n"}],"source":"secret = {'n': 'a', 'o': 'b', 'p': 'c', 'q': 'd', 'r': 'e', \n              's': 'f', 't': 'g', 'u': 'h', 'v': 'i', 'w': 'j',\n              'x': 'k', 'y': 'l', 'z': 'm', 'a': 'n', 'b': 'o', 'c': 'p', \n              'd': 'q', 'e': 'r', 'f': 's', 'g': 't', 'h': 'u', \n              'i': 'v', 'j': 'w', 'k': 'x', 'l': 'y', 'm': 'z'}\n\nprint(f'SECRET TABLE')\nprint(f'============')\nprint(f'FIND    | {\" | \".join(secret.keys())}')\nprint(f'REPLACE | {\" | \".join(secret.values())}')\n"}
{"cell_type":"code","execution_count":4,"metadata":{"scrolled":true,"trusted":true},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"cbd49a2b802e402a8997f92a92c029f3","version_major":2,"version_minor":0},"text/plain":"Maze()"},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":"Arire yrg gur srne bs fgevxvat bhg xrrc lbh sebz cynlvat gur tnzr.\n"},{"data":{"text/html":"<text style=color:red>âœ— Expected: Never let the fear of striking out keep you from playing the game.</text>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"}],"source":"bot = get_robo(\"decryption\")\n#your code here\nmessage = bot.read_message()\nprint(message)\n\n\n\n#check the solution\nbot.check()"}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":""}