{"hide_code_all_hidden":false,"kernelspec":{"display_name":"Python 3 (system-wide)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}}
{"cell_type":"code","execution_count":1,"metadata":{"hideCode":false,"hidePrompt":false,"trusted":true},"outputs":[],"source":"from worlds.levels import get_robo"}
{"cell_type":"markdown","metadata":{"hideCode":false,"hidePrompt":false},"source":"# Encrypt and decrypt\n\nHelp Otto report the correct messages \n\n\nThe first 2 messages should help construct the secret <br>\nThey are followed by 2 messages - one needs to be encrypted (scrambled) and the other needs to be decrypted\n\n\n### What you need to know\n\n- The functions `move()` to move.\n- calling `move()` in front of a wall causes otto to crash into the wall and the program errors out. Please take care of otto ðŸ¤—\n- The function `message_here()` returns True if message in the current cell.\n- The function `read_message()` returns the message if the message in the current cell.\n#### Python  function\n- `dict. get(key[, default])` - Returns the value for key in the dictionary; if not found returns a default value.\n-  `s.lower()` : Return a copy of the string with all the cased characters converted to lowercase.\n-  `s.upper()` : Return a copy of the string with all the cased characters converted to uppercase.\n-  `s.capitalize()`: Return a copy of the string with only its first character capitalized.\n-  And many more ...  [Goto Docs](https://docs.python.org/3/library/stdtypes.html#string-methods)\n"}
{"cell_type":"code","execution_count":12,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":"\n"}],"source":"def encode(secret_dict, msg):\n    #your code here\n    e=\"\"\n    return e\n\n#test encode here by calling it with various options!\n# Eg. the code below should print b a\nprint(encode( {\"a\":\"b\",\"b\":\"a\"}, \"a b\")) "}
{"cell_type":"code","execution_count":14,"metadata":{"hideCode":false,"hidePrompt":false,"trusted":true},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7f17d50cf0d541fdb2e3c5c4bcc7306f","version_major":2,"version_minor":0},"text/plain":"Maze()"},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":"abcdefghijklmnopqrstuvwxyz\nmxpavbrkcgznojequyhsliwfdt\n------------\nFlat is better than nested\nXvmlscbln ch xvssvy skmj lrnd\n"},{"data":{"text/html":"<text style=color:red>âœ— Expected: Bnms ch xvssvy skmj jvhsva</text>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"<text style=color:red>âœ— Expected: Beautiful is better than ugly</text>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"}],"source":"bot = get_robo(\"encryption\")\n\nalphabets=bot.read_message()\nbot.move()\n\nsecret=bot.read_message()\nbot.move()\n\nprint(alphabets)\nprint(secret)\nprint(\"------------\")\nplain_text = bot.read_message()\nbot.move()\n\nencrypted_text = bot.read_message()\nbot.move()\n\nprint(plain_text)\nprint(encrypted_text)\n\n# your code here\n# scramble the plain text and report it\n# decode the encrypted and report it\n# Code and use the encode method above to help you with these\n\n\nbot.check()"}
{"cell_type":"code","execution_count":3,"metadata":{"hideCode":false,"hideOutput":true,"hidePrompt":false,"trusted":true},"outputs":[],"source":""}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":""}