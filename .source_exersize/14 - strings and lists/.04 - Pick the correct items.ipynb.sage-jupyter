{"kernelspec":{"display_name":"Python 3 (system-wide)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}}
{"cell_type":"code","execution_count":1,"metadata":{"trusted":true},"outputs":[],"source":"from worlds.levels import get_robo"}
{"cell_type":"markdown","metadata":{},"source":"# Pick the correct items\n\nOtto needs to read the message and pick only those items which are in the message.<br>\nThe meesage is comma seperated list of items Eg. if the message is `daisy,apple` the pick only daisies and apples - leave the rest intact\n\n\n\n\n### What you need to know\n\n- The functions `move()` to move.\n- calling `move()` in front of a wall causes otto to crash into the wall and the program errors out. Please take care of otto ðŸ¤—\n- The function `message_here()` returns True if message in the current cell.\n- The function `read_message()` returns the message if the message in the current cell.\n\n#### Python buitin function\n- `len(s)` - returns the length of the string\n\n#### Python string spliting\n - `s.split(sep=None, maxsplit=-1)`: Returns a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements). If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made).\n\n\n"}
{"cell_type":"code","execution_count":4,"metadata":{"trusted":true},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"f145fa5be2494528bef22af4cbd7200c","version_major":2,"version_minor":0},"text/plain":"Maze()"},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":"strawberry,banana,daisy,apple\n"},{"data":{"text/html":"<text style=color:red>âœ— Expected: Pick object apple at: 2,1</text>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"<text style=color:red>âœ— Expected: Pick object daisy at: 3,1</text>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"<text style=color:red>âœ— Expected: Pick object strawberry at: 4,1</text>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"},{"data":{"text/html":"<text style=color:red>âœ— Expected: Pick object banana at: 6,1</text>","text/plain":"<IPython.core.display.HTML object>"},"metadata":{},"output_type":"display_data"}],"source":"bot = get_robo(\"count_words\")\nprint(bot.read_message())\n#Your Code here\n\n\nbot.check()"}
{"cell_type":"code","execution_count":3,"metadata":{"trusted":true},"outputs":[],"source":"#read the message from 1st cell, pick based on that"}
{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":""}